class Node(object):    def __init__(self, value):        self.next = None        self.prev = None        self.val = valueclass MyLinkList(object):    def __init__(self):        self.head = None        self.tail = None        self.size = 0    def add(self, val):        node = Node(val)        if self.tail is None:            self.head = node            self.tail = node            self.size += 1        else:            self.tail.next = node            node.prev = self.tail            self.tail = node            self.size += 1    def __remove_node(self, node):        if node.prev is None:            self.head = node.next        else:            node.prev.next = node.next        if node.next is None:            self.tail = node.prev        else:            node.next.prev = node.prev        self.size -= 1    def remove(self, value):        node = self.head        while node is not None:            if node.val == value:                self.__remove_node(node)            node = node.next    def remove_fist(self):        if self.tail is not None:            self.__remove_node(self.head)    def remove_last(self):        if self.tail is not None:            self.__remove_node(self.tail)    def front(self):        return self.head.val    def back(self):        return self.tail.val    def __str__(self):        _val = []        node = self.head        while node is not None:            _val.append(node.val)            node = node.next        return f"[{', '.join(str(val) for val in _val)}]"if __name__ == '__main__':    my_list = MyLinkList()    my_list.add(1)    my_list.add(2)    my_list.add(3)    my_list.add(4)    my_list.add(5)    print(my_list)    print(f"Total size: {my_list.size}")    my_list.remove(3)    print(my_list)    print(f"Total size: {my_list.size}")    my_list.remove_last()    print(my_list)